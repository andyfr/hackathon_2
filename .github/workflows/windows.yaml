name: Release Build

on:
  push:
    branches:
      - main
jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc

    - name: Build Release Binaries
      run: |
        cargo build --release --bin client
        cargo build --release --bin server

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-binaries
        path: |
          target/release/client.exe
          target/release/server.exe

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-unknown-linux-gnu

    - name: Install Linux dependencies
      shell: bash
      if: ${{ runner.os == 'linux' }}
      run: >
        sudo apt-get update

        sudo apt-get install --no-install-recommends 'libasound2-dev' 'libudev-dev' 'libwayland-dev' 'libxkbcommon-dev' 'protobuf-compiler'

    - name: Build Release Binaries
      run: |
        cargo build --release --bin client
        cargo build --release --bin server

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-binaries
        path: |
          target/release/client
          target/release/server

  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get Commit Hash
      id: commit_hash
      run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Download Windows Artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-binaries
        path: windows

    - name: Download Linux Artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-binaries
        path: linux

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.commit_hash.outputs.hash }}
        name: "Release ${{ steps.commit_hash.outputs.hash }}"
        artifacts: "windows/client.exe,windows/server.exe,linux/client,linux/server"
        replacesArtifacts: true
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        generateReleaseNotes: true
