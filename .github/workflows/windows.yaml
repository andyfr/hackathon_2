name: Release Build

on:
  push:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc

    - name: Setup Protoc
      uses: arduino/setup-protoc@v2
      with:
        version: "23.4"
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Release Binaries
      run: |
        cargo build --release --bin client
        cargo build --release --bin server

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-binaries
        path: |
          target/release/client.exe
          target/release/server.exe

  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-unknown-linux-gnu

    - name: Install Linux dependencies
      shell: bash
      if: ${{ runner.os == 'linux' }}
      run: |
        sudo apt-get update
        sudo apt-get install --no-install-recommends -y libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev protobuf-compiler zip

    - name: Build Release Binaries
      run: |
        cargo build --release --bin client
        cargo build --release --bin server

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-binaries
        path: |
          target/release/client
          target/release/server

  create-release:
    needs: [build-windows, build-linux] # Depends on both build jobs completing successfully
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create releases and upload assets

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for ncipollo/release-action to generate release notes

    - name: Get Commit Hash
      id: commit_hash
      run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Download Windows Artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-binaries
        path: artifacts/windows # Download to a subdirectory

    - name: Download Linux Artifacts
      uses: actions/download-artifact@v4
      with:
        name: linux-binaries
        path: artifacts/linux # Download to a subdirectory

    - name: Prepare Release Package
      run: |
        mkdir release-package # Create a staging directory
        # Copy downloaded binaries
        cp artifacts/windows/client.exe release-package/
        cp artifacts/windows/server.exe release-package/
        chmod +x artifacts/linux/client artifacts/linux/server  
        cp artifacts/linux/client release-package/
        cp artifacts/linux/server release-package/
        # Copy the assets folder from the checkout
        if [ -d "assets" ]; then
          cp -r assets release-package/
        else
          echo "Warning: 'assets' folder not found in repository root. Skipping."
        fi
        # --- ADDED: Copy the bot directory ---
        if [ -d "bot" ]; then
          cp -r bot release-package/
          echo "Copied 'bot' directory to release package."
        else
          echo "Warning: 'bot' folder not found in repository root. Skipping."
        fi
        # --- End of added section ---
        ls -R release-package # Optional: List contents for debugging

    - name: Create Zip Archive
      run: |
        cd release-package # Change directory to zip contents, not the folder itself[2]
        # The zip command remains the same, as it zips all contents of the current directory (.)
        zip -r ../release-${{ steps.commit_hash.outputs.hash }}.zip . # Create zip one level up[1][3]
        cd .. # Return to previous directory
        echo "Created release-${{ steps.commit_hash.outputs.hash }}.zip"

    - name: Create Release and Upload Zip
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.commit_hash.outputs.hash }}
        name: "Release ${{ steps.commit_hash.outputs.hash }}"
        artifacts: "release-${{ steps.commit_hash.outputs.hash }}.zip" # Point to the single zip file[5]
        replacesArtifacts: true
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        generateReleaseNotes: true # Generates release notes based on commits since last tag
